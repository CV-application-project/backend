// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_info.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createUserInfo = `-- name: CreateUserInfo :execresult
insert into user_info (user_id, username, email, token, expired_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateUserInfoParams struct {
	UserID    int64     `json:"user_id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Token     string    `json:"token"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserInfoStmt, createUserInfo,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.Token,
		arg.ExpiredAt,
	)
}

const getUserInfoByToken = `-- name: GetUserInfoByToken :one
select id, user_id, username, email, token, created_at, updated_at, expired_at
from user_info
where token = ?
  and expired_at > now()
`

func (q *Queries) GetUserInfoByToken(ctx context.Context, token string) (UserInfo, error) {
	row := q.queryRow(ctx, q.getUserInfoByTokenStmt, getUserInfoByToken, token)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getUserInfoByUsernameOrEmail = `-- name: GetUserInfoByUsernameOrEmail :one
select id, user_id, username, email, token, created_at, updated_at, expired_at
from user_info
where username = ?
   or email = ?
limit 1
`

type GetUserInfoByUsernameOrEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserInfoByUsernameOrEmail(ctx context.Context, arg GetUserInfoByUsernameOrEmailParams) (UserInfo, error) {
	row := q.queryRow(ctx, q.getUserInfoByUsernameOrEmailStmt, getUserInfoByUsernameOrEmail, arg.Username, arg.Email)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateUserInfoTokenByUserId = `-- name: UpdateUserInfoTokenByUserId :execresult
update user_info
set token = ? and expired_at = ?
where user_id = ?
`

type UpdateUserInfoTokenByUserIdParams struct {
	Token     string    `json:"token"`
	ExpiredAt time.Time `json:"expired_at"`
	UserID    int64     `json:"user_id"`
}

func (q *Queries) UpdateUserInfoTokenByUserId(ctx context.Context, arg UpdateUserInfoTokenByUserIdParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserInfoTokenByUserIdStmt, updateUserInfoTokenByUserId, arg.Token, arg.ExpiredAt, arg.UserID)
}
