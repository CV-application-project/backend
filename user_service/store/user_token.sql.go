// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_token.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createNewUserTokenByUserId = `-- name: CreateNewUserTokenByUserId :execresult
insert into user_token (user_id, token, expired_at) values (?, ?, ?)
`

type CreateNewUserTokenByUserIdParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateNewUserTokenByUserId(ctx context.Context, arg CreateNewUserTokenByUserIdParams) (sql.Result, error) {
	return q.exec(ctx, q.createNewUserTokenByUserIdStmt, createNewUserTokenByUserId, arg.UserID, arg.Token, arg.ExpiredAt)
}

const getUserTokenByUserId = `-- name: GetUserTokenByUserId :one
select id, user_id, token, created_at, expired_at from user_token where user_id = ?
`

func (q *Queries) GetUserTokenByUserId(ctx context.Context, userID int64) (UserToken, error) {
	row := q.queryRow(ctx, q.getUserTokenByUserIdStmt, getUserTokenByUserId, userID)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
