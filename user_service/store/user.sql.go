// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package store

import (
	"context"
	"database/sql"
)

const createNewUserInfo = `-- name: CreateNewUserInfo :execresult
insert into user (name, username, password, data, email) values (?, ?, ?, ?, ?)
`

type CreateNewUserInfoParams struct {
	Name     string         `json:"name"`
	Username string         `json:"username"`
	Password string         `json:"password"`
	Data     sql.NullString `json:"data"`
	Email    string         `json:"email"`
}

func (q *Queries) CreateNewUserInfo(ctx context.Context, arg CreateNewUserInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.createNewUserInfoStmt, createNewUserInfo,
		arg.Name,
		arg.Username,
		arg.Password,
		arg.Data,
		arg.Email,
	)
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
select id, name, username, password, data, created_at, updated_at, email from user where username = ? or email = ? limit 1
`

type GetUserByUsernameOrEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, arg GetUserByUsernameOrEmailParams) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameOrEmailStmt, getUserByUsernameOrEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getUserInfoById = `-- name: GetUserInfoById :one
select id, name, username, password, data, created_at, updated_at, email from user where id = ? limit 1
`

func (q *Queries) GetUserInfoById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserInfoByIdStmt, getUserInfoById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const updateUserInfoById = `-- name: UpdateUserInfoById :execresult
update user set data = ? where id = ?
`

type UpdateUserInfoByIdParams struct {
	Data sql.NullString `json:"data"`
	ID   int64          `json:"id"`
}

func (q *Queries) UpdateUserInfoById(ctx context.Context, arg UpdateUserInfoByIdParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserInfoByIdStmt, updateUserInfoById, arg.Data, arg.ID)
}
