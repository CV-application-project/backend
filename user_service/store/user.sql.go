// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package store

import (
	"context"
	"database/sql"
)

const createNewUserInfo = `-- name: CreateNewUserInfo :execresult
insert into user (name, employee_id, password, phone, address, gender, department, position, role, data, email,
                  front_card, back_card) value (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateNewUserInfoParams struct {
	Name       string         `json:"name"`
	EmployeeID string         `json:"employee_id"`
	Password   string         `json:"password"`
	Phone      sql.NullString `json:"phone"`
	Address    sql.NullString `json:"address"`
	Gender     sql.NullString `json:"gender"`
	Department sql.NullString `json:"department"`
	Position   sql.NullString `json:"position"`
	Role       sql.NullString `json:"role"`
	Data       sql.NullString `json:"data"`
	Email      string         `json:"email"`
	FrontCard  sql.NullString `json:"front_card"`
	BackCard   sql.NullString `json:"back_card"`
}

func (q *Queries) CreateNewUserInfo(ctx context.Context, arg CreateNewUserInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.createNewUserInfoStmt, createNewUserInfo,
		arg.Name,
		arg.EmployeeID,
		arg.Password,
		arg.Phone,
		arg.Address,
		arg.Gender,
		arg.Department,
		arg.Position,
		arg.Role,
		arg.Data,
		arg.Email,
		arg.FrontCard,
		arg.BackCard,
	)
}

const getAllUsers = `-- name: GetAllUsers :many
select id, name, employee_id, password, phone, address, gender, department, position, role, data, created_at, updated_at, email, front_card, back_card
from user
where role != 'HR'
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmployeeID,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Gender,
			&i.Department,
			&i.Position,
			&i.Role,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.FrontCard,
			&i.BackCard,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
select id, name, employee_id, password, phone, address, gender, department, position, role, data, created_at, updated_at, email, front_card, back_card
from user
where employee_id = ?
   or email = ?
limit 1
`

type GetUserByUsernameOrEmailParams struct {
	EmployeeID string `json:"employee_id"`
	Email      string `json:"email"`
}

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, arg GetUserByUsernameOrEmailParams) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameOrEmailStmt, getUserByUsernameOrEmail, arg.EmployeeID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmployeeID,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Gender,
		&i.Department,
		&i.Position,
		&i.Role,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.FrontCard,
		&i.BackCard,
	)
	return i, err
}

const getUserInfoById = `-- name: GetUserInfoById :one
select id, name, employee_id, password, phone, address, gender, department, position, role, data, created_at, updated_at, email, front_card, back_card
from user
where id = ?
limit 1
`

func (q *Queries) GetUserInfoById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserInfoByIdStmt, getUserInfoById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmployeeID,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Gender,
		&i.Department,
		&i.Position,
		&i.Role,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.FrontCard,
		&i.BackCard,
	)
	return i, err
}

const getUsersByDepartment = `-- name: GetUsersByDepartment :many
select id, name, employee_id, password, phone, address, gender, department, position, role, data, created_at, updated_at, email, front_card, back_card
from user
where department = ?
  and role = 'STAFF'
`

func (q *Queries) GetUsersByDepartment(ctx context.Context, department sql.NullString) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersByDepartmentStmt, getUsersByDepartment, department)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmployeeID,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Gender,
			&i.Department,
			&i.Position,
			&i.Role,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.FrontCard,
			&i.BackCard,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfoById = `-- name: UpdateUserInfoById :execresult
update user
set phone      = ?,
    address    = ?,
    department = ?,
    position   = ?,
    role       = ?,
    front_card = ?,
    back_card = ?
where id = ?
`

type UpdateUserInfoByIdParams struct {
	Phone      sql.NullString `json:"phone"`
	Address    sql.NullString `json:"address"`
	Department sql.NullString `json:"department"`
	Position   sql.NullString `json:"position"`
	Role       sql.NullString `json:"role"`
	FrontCard  sql.NullString `json:"front_card"`
	BackCard   sql.NullString `json:"back_card"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateUserInfoById(ctx context.Context, arg UpdateUserInfoByIdParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserInfoByIdStmt, updateUserInfoById,
		arg.Phone,
		arg.Address,
		arg.Department,
		arg.Position,
		arg.Role,
		arg.FrontCard,
		arg.BackCard,
		arg.ID,
	)
}
