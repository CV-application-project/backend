// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_service/api/data.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 50 {
		return RegisterUserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return RegisterUserRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 255 {
		return RegisterUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 255 {
		return RegisterUserRequestValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	return nil
}

// RegisterUserRequestValidationError is the validation error returned by
// RegisterUserRequest.Validate if the designated constraints aren't met.
type RegisterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserRequestValidationError) ErrorName() string {
	return "RegisterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserRequestValidationError{}

// Validate checks the field values on RegisterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegisterUserResponseValidationError is the validation error returned by
// RegisterUserResponse.Validate if the designated constraints aren't met.
type RegisterUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserResponseValidationError) ErrorName() string {
	return "RegisterUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserResponseValidationError{}

// Validate checks the field values on UserToken with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserToken) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for ExpiredAt

	return nil
}

// UserTokenValidationError is the validation error returned by
// UserToken.Validate if the designated constraints aren't met.
type UserTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTokenValidationError) ErrorName() string { return "UserTokenValidationError" }

// Error satisfies the builtin error interface
func (e UserTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTokenValidationError{}

// Validate checks the field values on AuthorizeUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 50 {
		return AuthorizeUserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 255 {
		return AuthorizeUserRequestValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 255 {
		return AuthorizeUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
	}

	return nil
}

// AuthorizeUserRequestValidationError is the validation error returned by
// AuthorizeUserRequest.Validate if the designated constraints aren't met.
type AuthorizeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeUserRequestValidationError) ErrorName() string {
	return "AuthorizeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeUserRequestValidationError{}

// Validate checks the field values on AuthorizeUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizeUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AuthorizeUserResponseValidationError is the validation error returned by
// AuthorizeUserResponse.Validate if the designated constraints aren't met.
type AuthorizeUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeUserResponseValidationError) ErrorName() string {
	return "AuthorizeUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeUserResponseValidationError{}
