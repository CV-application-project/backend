// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cv_service/api/data.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetCICByUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCICByUserIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return GetCICByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetCICByUserIdRequestValidationError is the validation error returned by
// GetCICByUserIdRequest.Validate if the designated constraints aren't met.
type GetCICByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCICByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCICByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCICByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCICByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCICByUserIdRequestValidationError) ErrorName() string {
	return "GetCICByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCICByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCICByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCICByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCICByUserIdRequestValidationError{}

// Validate checks the field values on GetCICByUserIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCICByUserIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCICByUserIdResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCICByUserIdResponseValidationError is the validation error returned by
// GetCICByUserIdResponse.Validate if the designated constraints aren't met.
type GetCICByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCICByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCICByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCICByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCICByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCICByUserIdResponseValidationError) ErrorName() string {
	return "GetCICByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCICByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCICByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCICByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCICByUserIdResponseValidationError{}

// Validate checks the field values on CitizenIdentityCard with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CitizenIdentityCard) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if m.GetRegisterDate() <= 0 {
		return CitizenIdentityCardValidationError{
			field:  "RegisterDate",
			reason: "value must be greater than 0",
		}
	}

	if m.GetExpireDate() <= 0 {
		return CitizenIdentityCardValidationError{
			field:  "ExpireDate",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Provider

	if m.GetBirthday() <= 0 {
		return CitizenIdentityCardValidationError{
			field:  "Birthday",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetBornProvince()); l < 0 || l > 255 {
		return CitizenIdentityCardValidationError{
			field:  "BornProvince",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 0 {
		return CitizenIdentityCardValidationError{
			field:  "Name",
			reason: "value length must be at least 0 runes",
		}
	}

	// no validation rules for Gender

	// no validation rules for Country

	// no validation rules for Location

	return nil
}

// CitizenIdentityCardValidationError is the validation error returned by
// CitizenIdentityCard.Validate if the designated constraints aren't met.
type CitizenIdentityCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitizenIdentityCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitizenIdentityCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitizenIdentityCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitizenIdentityCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitizenIdentityCardValidationError) ErrorName() string {
	return "CitizenIdentityCardValidationError"
}

// Error satisfies the builtin error interface
func (e CitizenIdentityCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitizenIdentityCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitizenIdentityCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitizenIdentityCardValidationError{}

// Validate checks the field values on RegisterUserFaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterUserFaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return RegisterUserFaceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if len(m.GetImage()) < 0 {
		return RegisterUserFaceRequestValidationError{
			field:  "Image",
			reason: "value length must be at least 0 bytes",
		}
	}

	return nil
}

// RegisterUserFaceRequestValidationError is the validation error returned by
// RegisterUserFaceRequest.Validate if the designated constraints aren't met.
type RegisterUserFaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserFaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserFaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserFaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserFaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserFaceRequestValidationError) ErrorName() string {
	return "RegisterUserFaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserFaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserFaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserFaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserFaceRequestValidationError{}

// Validate checks the field values on RegisterUserFaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterUserFaceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// RegisterUserFaceResponseValidationError is the validation error returned by
// RegisterUserFaceResponse.Validate if the designated constraints aren't met.
type RegisterUserFaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserFaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserFaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserFaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserFaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserFaceResponseValidationError) ErrorName() string {
	return "RegisterUserFaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserFaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserFaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserFaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserFaceResponseValidationError{}

// Validate checks the field values on AuthorizeUserFaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeUserFaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return AuthorizeUserFaceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if len(m.GetImage()) < 0 {
		return AuthorizeUserFaceRequestValidationError{
			field:  "Image",
			reason: "value length must be at least 0 bytes",
		}
	}

	return nil
}

// AuthorizeUserFaceRequestValidationError is the validation error returned by
// AuthorizeUserFaceRequest.Validate if the designated constraints aren't met.
type AuthorizeUserFaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeUserFaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeUserFaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeUserFaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeUserFaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeUserFaceRequestValidationError) ErrorName() string {
	return "AuthorizeUserFaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeUserFaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeUserFaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeUserFaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeUserFaceRequestValidationError{}

// Validate checks the field values on AuthorizeUserFaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeUserFaceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for UserId

	// no validation rules for Message

	return nil
}

// AuthorizeUserFaceResponseValidationError is the validation error returned by
// AuthorizeUserFaceResponse.Validate if the designated constraints aren't met.
type AuthorizeUserFaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeUserFaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeUserFaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeUserFaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeUserFaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeUserFaceResponseValidationError) ErrorName() string {
	return "AuthorizeUserFaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeUserFaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeUserFaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeUserFaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeUserFaceResponseValidationError{}

// Validate checks the field values on UpsertCICForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertCICForUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return UpsertCICForUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Front

	// no validation rules for Back

	return nil
}

// UpsertCICForUserRequestValidationError is the validation error returned by
// UpsertCICForUserRequest.Validate if the designated constraints aren't met.
type UpsertCICForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertCICForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertCICForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertCICForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertCICForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertCICForUserRequestValidationError) ErrorName() string {
	return "UpsertCICForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertCICForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertCICForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertCICForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertCICForUserRequestValidationError{}

// Validate checks the field values on UpsertCICForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertCICForUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertCICForUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpsertCICForUserResponseValidationError is the validation error returned by
// UpsertCICForUserResponse.Validate if the designated constraints aren't met.
type UpsertCICForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertCICForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertCICForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertCICForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertCICForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertCICForUserResponseValidationError) ErrorName() string {
	return "UpsertCICForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertCICForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertCICForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertCICForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertCICForUserResponseValidationError{}
