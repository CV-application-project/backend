// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCICByUserIdStmt, err = db.PrepareContext(ctx, createCICByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCICByUserId: %w", err)
	}
	if q.createFaceByUserIdStmt, err = db.PrepareContext(ctx, createFaceByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFaceByUserId: %w", err)
	}
	if q.getCICByUserIdStmt, err = db.PrepareContext(ctx, getCICByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCICByUserId: %w", err)
	}
	if q.getCICByUserIdForUpdateStmt, err = db.PrepareContext(ctx, getCICByUserIdForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetCICByUserIdForUpdate: %w", err)
	}
	if q.getFaceByUserIdStmt, err = db.PrepareContext(ctx, getFaceByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFaceByUserId: %w", err)
	}
	if q.getFaceByUserIdForUpdateStmt, err = db.PrepareContext(ctx, getFaceByUserIdForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetFaceByUserIdForUpdate: %w", err)
	}
	if q.updateCICByUserIdStmt, err = db.PrepareContext(ctx, updateCICByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCICByUserId: %w", err)
	}
	if q.updateFaceByUserIdStmt, err = db.PrepareContext(ctx, updateFaceByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFaceByUserId: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCICByUserIdStmt != nil {
		if cerr := q.createCICByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCICByUserIdStmt: %w", cerr)
		}
	}
	if q.createFaceByUserIdStmt != nil {
		if cerr := q.createFaceByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFaceByUserIdStmt: %w", cerr)
		}
	}
	if q.getCICByUserIdStmt != nil {
		if cerr := q.getCICByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCICByUserIdStmt: %w", cerr)
		}
	}
	if q.getCICByUserIdForUpdateStmt != nil {
		if cerr := q.getCICByUserIdForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCICByUserIdForUpdateStmt: %w", cerr)
		}
	}
	if q.getFaceByUserIdStmt != nil {
		if cerr := q.getFaceByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFaceByUserIdStmt: %w", cerr)
		}
	}
	if q.getFaceByUserIdForUpdateStmt != nil {
		if cerr := q.getFaceByUserIdForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFaceByUserIdForUpdateStmt: %w", cerr)
		}
	}
	if q.updateCICByUserIdStmt != nil {
		if cerr := q.updateCICByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCICByUserIdStmt: %w", cerr)
		}
	}
	if q.updateFaceByUserIdStmt != nil {
		if cerr := q.updateFaceByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFaceByUserIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createCICByUserIdStmt        *sql.Stmt
	createFaceByUserIdStmt       *sql.Stmt
	getCICByUserIdStmt           *sql.Stmt
	getCICByUserIdForUpdateStmt  *sql.Stmt
	getFaceByUserIdStmt          *sql.Stmt
	getFaceByUserIdForUpdateStmt *sql.Stmt
	updateCICByUserIdStmt        *sql.Stmt
	updateFaceByUserIdStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createCICByUserIdStmt:        q.createCICByUserIdStmt,
		createFaceByUserIdStmt:       q.createFaceByUserIdStmt,
		getCICByUserIdStmt:           q.getCICByUserIdStmt,
		getCICByUserIdForUpdateStmt:  q.getCICByUserIdForUpdateStmt,
		getFaceByUserIdStmt:          q.getFaceByUserIdStmt,
		getFaceByUserIdForUpdateStmt: q.getFaceByUserIdForUpdateStmt,
		updateCICByUserIdStmt:        q.updateCICByUserIdStmt,
		updateFaceByUserIdStmt:       q.updateFaceByUserIdStmt,
	}
}
