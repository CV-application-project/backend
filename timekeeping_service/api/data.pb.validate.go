// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: timekeeping_service/api/data.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetHistoryOfUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHistoryOfUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return GetHistoryOfUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistoryOfUserRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetHistoryOfUserRequestValidationError is the validation error returned by
// GetHistoryOfUserRequest.Validate if the designated constraints aren't met.
type GetHistoryOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryOfUserRequestValidationError) ErrorName() string {
	return "GetHistoryOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryOfUserRequestValidationError{}

// Validate checks the field values on GetHistoryOfUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHistoryOfUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHistoryOfUserResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetHistoryOfUserResponseValidationError is the validation error returned by
// GetHistoryOfUserResponse.Validate if the designated constraints aren't met.
type GetHistoryOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryOfUserResponseValidationError) ErrorName() string {
	return "GetHistoryOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryOfUserResponseValidationError{}

// Validate checks the field values on HistoryTime with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HistoryTime) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFrom() <= 0 {
		return HistoryTimeValidationError{
			field:  "From",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTo() <= 0 {
		return HistoryTimeValidationError{
			field:  "To",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// HistoryTimeValidationError is the validation error returned by
// HistoryTime.Validate if the designated constraints aren't met.
type HistoryTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryTimeValidationError) ErrorName() string { return "HistoryTimeValidationError" }

// Error satisfies the builtin error interface
func (e HistoryTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryTimeValidationError{}

// Validate checks the field values on TimekeepingHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TimekeepingHistory) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if val := m.GetDay(); val <= 0 || val >= 32 {
		return TimekeepingHistoryValidationError{
			field:  "Day",
			reason: "value must be inside range (0, 32)",
		}
	}

	if val := m.GetMonth(); val <= 0 || val >= 13 {
		return TimekeepingHistoryValidationError{
			field:  "Month",
			reason: "value must be inside range (0, 13)",
		}
	}

	if m.GetYear() <= 0 {
		return TimekeepingHistoryValidationError{
			field:  "Year",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimekeepingHistoryValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimekeepingHistoryValidationError is the validation error returned by
// TimekeepingHistory.Validate if the designated constraints aren't met.
type TimekeepingHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimekeepingHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimekeepingHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimekeepingHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimekeepingHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimekeepingHistoryValidationError) ErrorName() string {
	return "TimekeepingHistoryValidationError"
}

// Error satisfies the builtin error interface
func (e TimekeepingHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimekeepingHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimekeepingHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimekeepingHistoryValidationError{}

// Validate checks the field values on HistoryDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HistoryDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalTime

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryDetailValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HistoryDetailValidationError is the validation error returned by
// HistoryDetail.Validate if the designated constraints aren't met.
type HistoryDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryDetailValidationError) ErrorName() string { return "HistoryDetailValidationError" }

// Error satisfies the builtin error interface
func (e HistoryDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryDetailValidationError{}

// Validate checks the field values on CreateHistoryOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHistoryOfUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() < 0 {
		return CreateHistoryOfUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetStartTime() <= 0 {
		return CreateHistoryOfUserRequestValidationError{
			field:  "StartTime",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateHistoryOfUserRequestValidationError is the validation error returned
// by CreateHistoryOfUserRequest.Validate if the designated constraints aren't met.
type CreateHistoryOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHistoryOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHistoryOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHistoryOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHistoryOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHistoryOfUserRequestValidationError) ErrorName() string {
	return "CreateHistoryOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHistoryOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHistoryOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHistoryOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHistoryOfUserRequestValidationError{}

// Validate checks the field values on CreateHistoryOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHistoryOfUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// CreateHistoryOfUserResponseValidationError is the validation error returned
// by CreateHistoryOfUserResponse.Validate if the designated constraints
// aren't met.
type CreateHistoryOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHistoryOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHistoryOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHistoryOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHistoryOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHistoryOfUserResponseValidationError) ErrorName() string {
	return "CreateHistoryOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHistoryOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHistoryOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHistoryOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHistoryOfUserResponseValidationError{}

// Validate checks the field values on UpdateHistoryOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHistoryOfUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return UpdateHistoryOfUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// UpdateHistoryOfUserRequestValidationError is the validation error returned
// by UpdateHistoryOfUserRequest.Validate if the designated constraints aren't met.
type UpdateHistoryOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHistoryOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHistoryOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHistoryOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHistoryOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHistoryOfUserRequestValidationError) ErrorName() string {
	return "UpdateHistoryOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHistoryOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHistoryOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHistoryOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHistoryOfUserRequestValidationError{}

// Validate checks the field values on UpdateHistoryOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHistoryOfUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TotalTime

	return nil
}

// UpdateHistoryOfUserResponseValidationError is the validation error returned
// by UpdateHistoryOfUserResponse.Validate if the designated constraints
// aren't met.
type UpdateHistoryOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHistoryOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHistoryOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHistoryOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHistoryOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHistoryOfUserResponseValidationError) ErrorName() string {
	return "UpdateHistoryOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHistoryOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHistoryOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHistoryOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHistoryOfUserResponseValidationError{}

// Validate checks the field values on UpsertHistoryOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertHistoryOfUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() < 0 {
		return UpsertHistoryOfUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLockTime() <= 0 {
		return UpsertHistoryOfUserRequestValidationError{
			field:  "LockTime",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UpsertHistoryOfUserRequestValidationError is the validation error returned
// by UpsertHistoryOfUserRequest.Validate if the designated constraints aren't met.
type UpsertHistoryOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertHistoryOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertHistoryOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertHistoryOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertHistoryOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertHistoryOfUserRequestValidationError) ErrorName() string {
	return "UpsertHistoryOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertHistoryOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertHistoryOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertHistoryOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertHistoryOfUserRequestValidationError{}

// Validate checks the field values on UpsertHistoryOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertHistoryOfUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TotalTime

	return nil
}

// UpsertHistoryOfUserResponseValidationError is the validation error returned
// by UpsertHistoryOfUserResponse.Validate if the designated constraints
// aren't met.
type UpsertHistoryOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertHistoryOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertHistoryOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertHistoryOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertHistoryOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertHistoryOfUserResponseValidationError) ErrorName() string {
	return "UpsertHistoryOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertHistoryOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertHistoryOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertHistoryOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertHistoryOfUserResponseValidationError{}

// Validate checks the field values on GetHistoryByListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHistoryByListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetHistoryByListRequestValidationError is the validation error returned by
// GetHistoryByListRequest.Validate if the designated constraints aren't met.
type GetHistoryByListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryByListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryByListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryByListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryByListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryByListRequestValidationError) ErrorName() string {
	return "GetHistoryByListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryByListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryByListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryByListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryByListRequestValidationError{}

// Validate checks the field values on GetHistoryByListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHistoryByListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHistoryByListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetHistoryByListResponseValidationError is the validation error returned by
// GetHistoryByListResponse.Validate if the designated constraints aren't met.
type GetHistoryByListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryByListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryByListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryByListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryByListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryByListResponseValidationError) ErrorName() string {
	return "GetHistoryByListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryByListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryByListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryByListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryByListResponseValidationError{}

// Validate checks the field values on HistoryDetail_Line with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HistoryDetail_Line) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// HistoryDetail_LineValidationError is the validation error returned by
// HistoryDetail_Line.Validate if the designated constraints aren't met.
type HistoryDetail_LineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryDetail_LineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryDetail_LineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryDetail_LineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryDetail_LineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryDetail_LineValidationError) ErrorName() string {
	return "HistoryDetail_LineValidationError"
}

// Error satisfies the builtin error interface
func (e HistoryDetail_LineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryDetail_Line.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryDetail_LineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryDetail_LineValidationError{}
