// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTimekeepingHistoryStmt, err = db.PrepareContext(ctx, createTimekeepingHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTimekeepingHistory: %w", err)
	}
	if q.getHistoryByListStmt, err = db.PrepareContext(ctx, getHistoryByList); err != nil {
		return nil, fmt.Errorf("error preparing query GetHistoryByList: %w", err)
	}
	if q.getTimekeepingHistoryAtMonthByUserIdStmt, err = db.PrepareContext(ctx, getTimekeepingHistoryAtMonthByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimekeepingHistoryAtMonthByUserId: %w", err)
	}
	if q.getTimekeepingHistoryByDurationStmt, err = db.PrepareContext(ctx, getTimekeepingHistoryByDuration); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimekeepingHistoryByDuration: %w", err)
	}
	if q.getTimekeepingHistoryInDayByUserIdStmt, err = db.PrepareContext(ctx, getTimekeepingHistoryInDayByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimekeepingHistoryInDayByUserId: %w", err)
	}
	if q.getTimekeepingHistoryInYearByUserIdStmt, err = db.PrepareContext(ctx, getTimekeepingHistoryInYearByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimekeepingHistoryInYearByUserId: %w", err)
	}
	if q.updateTimekeepingHistoryInDayStmt, err = db.PrepareContext(ctx, updateTimekeepingHistoryInDay); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTimekeepingHistoryInDay: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTimekeepingHistoryStmt != nil {
		if cerr := q.createTimekeepingHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTimekeepingHistoryStmt: %w", cerr)
		}
	}
	if q.getHistoryByListStmt != nil {
		if cerr := q.getHistoryByListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHistoryByListStmt: %w", cerr)
		}
	}
	if q.getTimekeepingHistoryAtMonthByUserIdStmt != nil {
		if cerr := q.getTimekeepingHistoryAtMonthByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimekeepingHistoryAtMonthByUserIdStmt: %w", cerr)
		}
	}
	if q.getTimekeepingHistoryByDurationStmt != nil {
		if cerr := q.getTimekeepingHistoryByDurationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimekeepingHistoryByDurationStmt: %w", cerr)
		}
	}
	if q.getTimekeepingHistoryInDayByUserIdStmt != nil {
		if cerr := q.getTimekeepingHistoryInDayByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimekeepingHistoryInDayByUserIdStmt: %w", cerr)
		}
	}
	if q.getTimekeepingHistoryInYearByUserIdStmt != nil {
		if cerr := q.getTimekeepingHistoryInYearByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimekeepingHistoryInYearByUserIdStmt: %w", cerr)
		}
	}
	if q.updateTimekeepingHistoryInDayStmt != nil {
		if cerr := q.updateTimekeepingHistoryInDayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTimekeepingHistoryInDayStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	createTimekeepingHistoryStmt             *sql.Stmt
	getHistoryByListStmt                     *sql.Stmt
	getTimekeepingHistoryAtMonthByUserIdStmt *sql.Stmt
	getTimekeepingHistoryByDurationStmt      *sql.Stmt
	getTimekeepingHistoryInDayByUserIdStmt   *sql.Stmt
	getTimekeepingHistoryInYearByUserIdStmt  *sql.Stmt
	updateTimekeepingHistoryInDayStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		createTimekeepingHistoryStmt:             q.createTimekeepingHistoryStmt,
		getHistoryByListStmt:                     q.getHistoryByListStmt,
		getTimekeepingHistoryAtMonthByUserIdStmt: q.getTimekeepingHistoryAtMonthByUserIdStmt,
		getTimekeepingHistoryByDurationStmt:      q.getTimekeepingHistoryByDurationStmt,
		getTimekeepingHistoryInDayByUserIdStmt:   q.getTimekeepingHistoryInDayByUserIdStmt,
		getTimekeepingHistoryInYearByUserIdStmt:  q.getTimekeepingHistoryInYearByUserIdStmt,
		updateTimekeepingHistoryInDayStmt:        q.updateTimekeepingHistoryInDayStmt,
	}
}
