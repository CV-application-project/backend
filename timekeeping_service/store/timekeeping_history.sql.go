// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: timekeeping_history.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createTimekeepingHistory = `-- name: CreateTimekeepingHistory :execresult
insert into timekeeping_history (user_id, ` + "`" + `day` + "`" + `, ` + "`" + `month` + "`" + `, ` + "`" + `year` + "`" + `, ` + "`" + `data` + "`" + `, ` + "`" + `is_active` + "`" + `)
VALUES (?, ?, ?, ?, ?, true)
`

type CreateTimekeepingHistoryParams struct {
	UserID int64          `json:"user_id"`
	Day    int32          `json:"day"`
	Month  int32          `json:"month"`
	Year   int32          `json:"year"`
	Data   sql.NullString `json:"data"`
}

func (q *Queries) CreateTimekeepingHistory(ctx context.Context, arg CreateTimekeepingHistoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createTimekeepingHistoryStmt, createTimekeepingHistory,
		arg.UserID,
		arg.Day,
		arg.Month,
		arg.Year,
		arg.Data,
	)
}

const getTimekeepingHistoryAtMonthByUserId = `-- name: GetTimekeepingHistoryAtMonthByUserId :many
select id, user_id, day, month, year, is_active, data, created_at, updated_at
from timekeeping_history
where ` + "`" + `user_id` + "`" + ` = ?
  and ` + "`" + `month` + "`" + ` = ?
  and ` + "`" + `year` + "`" + ` = ?
  and is_active = true
`

type GetTimekeepingHistoryAtMonthByUserIdParams struct {
	UserID int64 `json:"user_id"`
	Month  int32 `json:"month"`
	Year   int32 `json:"year"`
}

func (q *Queries) GetTimekeepingHistoryAtMonthByUserId(ctx context.Context, arg GetTimekeepingHistoryAtMonthByUserIdParams) ([]TimekeepingHistory, error) {
	rows, err := q.query(ctx, q.getTimekeepingHistoryAtMonthByUserIdStmt, getTimekeepingHistoryAtMonthByUserId, arg.UserID, arg.Month, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimekeepingHistory{}
	for rows.Next() {
		var i TimekeepingHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Day,
			&i.Month,
			&i.Year,
			&i.IsActive,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimekeepingHistoryByDuration = `-- name: GetTimekeepingHistoryByDuration :many
select id, user_id, day, month, year, is_active, data, created_at, updated_at from timekeeping_history
where ` + "`" + `user_id` + "`" + ` = ? and ` + "`" + `created_at` + "`" + ` between ? and ?
`

type GetTimekeepingHistoryByDurationParams struct {
	UserID      int64     `json:"user_id"`
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) GetTimekeepingHistoryByDuration(ctx context.Context, arg GetTimekeepingHistoryByDurationParams) ([]TimekeepingHistory, error) {
	rows, err := q.query(ctx, q.getTimekeepingHistoryByDurationStmt, getTimekeepingHistoryByDuration, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimekeepingHistory{}
	for rows.Next() {
		var i TimekeepingHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Day,
			&i.Month,
			&i.Year,
			&i.IsActive,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimekeepingHistoryInDayByUserId = `-- name: GetTimekeepingHistoryInDayByUserId :one
select id, user_id, day, month, year, is_active, data, created_at, updated_at
from timekeeping_history
where ` + "`" + `user_id` + "`" + ` = ?
  and ` + "`" + `day` + "`" + ` = ?
  and ` + "`" + `month` + "`" + ` = ?
  and ` + "`" + `year` + "`" + ` = ?
  and is_active = true
`

type GetTimekeepingHistoryInDayByUserIdParams struct {
	UserID int64 `json:"user_id"`
	Day    int32 `json:"day"`
	Month  int32 `json:"month"`
	Year   int32 `json:"year"`
}

func (q *Queries) GetTimekeepingHistoryInDayByUserId(ctx context.Context, arg GetTimekeepingHistoryInDayByUserIdParams) (TimekeepingHistory, error) {
	row := q.queryRow(ctx, q.getTimekeepingHistoryInDayByUserIdStmt, getTimekeepingHistoryInDayByUserId,
		arg.UserID,
		arg.Day,
		arg.Month,
		arg.Year,
	)
	var i TimekeepingHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Day,
		&i.Month,
		&i.Year,
		&i.IsActive,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTimekeepingHistoryInYearByUserId = `-- name: GetTimekeepingHistoryInYearByUserId :many
select id, user_id, day, month, year, is_active, data, created_at, updated_at
from timekeeping_history
where ` + "`" + `user_id` + "`" + ` = ?
  and ` + "`" + `year` + "`" + ` = ?
`

type GetTimekeepingHistoryInYearByUserIdParams struct {
	UserID int64 `json:"user_id"`
	Year   int32 `json:"year"`
}

func (q *Queries) GetTimekeepingHistoryInYearByUserId(ctx context.Context, arg GetTimekeepingHistoryInYearByUserIdParams) ([]TimekeepingHistory, error) {
	rows, err := q.query(ctx, q.getTimekeepingHistoryInYearByUserIdStmt, getTimekeepingHistoryInYearByUserId, arg.UserID, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimekeepingHistory{}
	for rows.Next() {
		var i TimekeepingHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Day,
			&i.Month,
			&i.Year,
			&i.IsActive,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimekeepingHistoryInDay = `-- name: UpdateTimekeepingHistoryInDay :execresult
update timekeeping_history
set ` + "`" + `data` + "`" + ` = ?
where ` + "`" + `user_id` + "`" + ` = ?
  and ` + "`" + `day` + "`" + ` = ?
  and ` + "`" + `month` + "`" + ` = ?
  and ` + "`" + `year` + "`" + ` = ?
  and is_active = true
`

type UpdateTimekeepingHistoryInDayParams struct {
	Data   sql.NullString `json:"data"`
	UserID int64          `json:"user_id"`
	Day    int32          `json:"day"`
	Month  int32          `json:"month"`
	Year   int32          `json:"year"`
}

func (q *Queries) UpdateTimekeepingHistoryInDay(ctx context.Context, arg UpdateTimekeepingHistoryInDayParams) (sql.Result, error) {
	return q.exec(ctx, q.updateTimekeepingHistoryInDayStmt, updateTimekeepingHistoryInDay,
		arg.Data,
		arg.UserID,
		arg.Day,
		arg.Month,
		arg.Year,
	)
}
